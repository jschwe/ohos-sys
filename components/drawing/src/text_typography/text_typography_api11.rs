/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::text_declaration::*;
use crate::types::*;

impl OH_Drawing_TextDirection {
    /// Right to left (RTL)
    pub const TEXT_DIRECTION_RTL: OH_Drawing_TextDirection = OH_Drawing_TextDirection(0);
}
impl OH_Drawing_TextDirection {
    /// Left to right (LTR)
    pub const TEXT_DIRECTION_LTR: OH_Drawing_TextDirection = OH_Drawing_TextDirection(1);
}
#[repr(transparent)]
/// @brief Enumerates text directions.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDirection(pub ::core::ffi::c_uint);
impl OH_Drawing_TextAlign {
    /// Left-aligned
    pub const TEXT_ALIGN_LEFT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(0);
}
impl OH_Drawing_TextAlign {
    /// Right-aligned
    pub const TEXT_ALIGN_RIGHT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(1);
}
impl OH_Drawing_TextAlign {
    /// Center-aligned
    pub const TEXT_ALIGN_CENTER: OH_Drawing_TextAlign = OH_Drawing_TextAlign(2);
}
impl OH_Drawing_TextAlign {
    /** Justified, which means that each line (except the last line) is stretched so that every line has equal width,
    and the left and right margins are straight.*/
    pub const TEXT_ALIGN_JUSTIFY: OH_Drawing_TextAlign = OH_Drawing_TextAlign(3);
}
impl OH_Drawing_TextAlign {
    /** <b>TEXT_ALIGN_START</b> achieves the same effect as <b>TEXT_ALIGN_LEFT</b>
    when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_LTR</b>;
    it achieves the same effect as <b>TEXT_ALIGN_RIGHT</b>
    when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_RTL</b>.*/
    pub const TEXT_ALIGN_START: OH_Drawing_TextAlign = OH_Drawing_TextAlign(4);
}
impl OH_Drawing_TextAlign {
    /** <b>TEXT_ALIGN_END</b> achieves the same effect as <b>TEXT_ALIGN_RIGHT</b>
    when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_LTR</b>;
    it achieves the same effect as <b>TEXT_ALIGN_LEFT</b>
    when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_RTL</b>.*/
    pub const TEXT_ALIGN_END: OH_Drawing_TextAlign = OH_Drawing_TextAlign(5);
}
#[repr(transparent)]
/// @brief Enumerates text alignment modes.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextAlign(pub ::core::ffi::c_uint);
impl OH_Drawing_FontWeight {
    /// Thin
    pub const FONT_WEIGHT_100: OH_Drawing_FontWeight = OH_Drawing_FontWeight(0);
}
impl OH_Drawing_FontWeight {
    /// Extra-light
    pub const FONT_WEIGHT_200: OH_Drawing_FontWeight = OH_Drawing_FontWeight(1);
}
impl OH_Drawing_FontWeight {
    /// Light
    pub const FONT_WEIGHT_300: OH_Drawing_FontWeight = OH_Drawing_FontWeight(2);
}
impl OH_Drawing_FontWeight {
    /// Normal/Regular
    pub const FONT_WEIGHT_400: OH_Drawing_FontWeight = OH_Drawing_FontWeight(3);
}
impl OH_Drawing_FontWeight {
    /// Medium
    pub const FONT_WEIGHT_500: OH_Drawing_FontWeight = OH_Drawing_FontWeight(4);
}
impl OH_Drawing_FontWeight {
    /// Semi-bold
    pub const FONT_WEIGHT_600: OH_Drawing_FontWeight = OH_Drawing_FontWeight(5);
}
impl OH_Drawing_FontWeight {
    /// Bold
    pub const FONT_WEIGHT_700: OH_Drawing_FontWeight = OH_Drawing_FontWeight(6);
}
impl OH_Drawing_FontWeight {
    /// Extra-bold
    pub const FONT_WEIGHT_800: OH_Drawing_FontWeight = OH_Drawing_FontWeight(7);
}
impl OH_Drawing_FontWeight {
    /// Black
    pub const FONT_WEIGHT_900: OH_Drawing_FontWeight = OH_Drawing_FontWeight(8);
}
#[repr(transparent)]
/// @brief Enumerates font weights.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontWeight(pub ::core::ffi::c_uint);
impl OH_Drawing_TextBaseline {
    /// Alphabetic, where the letters in alphabets like English sit on.
    pub const TEXT_BASELINE_ALPHABETIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(0);
}
impl OH_Drawing_TextBaseline {
    /// Ideographic. The baseline is at the bottom of the text area.
    pub const TEXT_BASELINE_IDEOGRAPHIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(1);
}
#[repr(transparent)]
/// @brief Enumerates text baselines.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextBaseline(pub ::core::ffi::c_uint);
impl OH_Drawing_TextDecoration {
    /// No decoration.
    pub const TEXT_DECORATION_NONE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(0);
}
impl OH_Drawing_TextDecoration {
    /// A underline is used for decoration.
    pub const TEXT_DECORATION_UNDERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(1);
}
impl OH_Drawing_TextDecoration {
    /// An overline is used for decoration.
    pub const TEXT_DECORATION_OVERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(2);
}
impl OH_Drawing_TextDecoration {
    /// A strikethrough is used for decoration.
    pub const TEXT_DECORATION_LINE_THROUGH: OH_Drawing_TextDecoration =
        OH_Drawing_TextDecoration(4);
}
#[repr(transparent)]
/// @brief Enumerates text decorations.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDecoration(pub ::core::ffi::c_uint);
impl OH_Drawing_FontStyle {
    /// Normal style
    pub const FONT_STYLE_NORMAL: OH_Drawing_FontStyle = OH_Drawing_FontStyle(0);
}
impl OH_Drawing_FontStyle {
    /// Italic style
    pub const FONT_STYLE_ITALIC: OH_Drawing_FontStyle = OH_Drawing_FontStyle(1);
}
#[repr(transparent)]
/// @brief Enumerates font styles.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontStyle(pub ::core::ffi::c_uint);
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Offset At Baseline
    pub const ALIGNMENT_OFFSET_AT_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(0);
}
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Above Baseline
    pub const ALIGNMENT_ABOVE_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(1);
}
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Below Baseline
    pub const ALIGNMENT_BELOW_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(2);
}
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Top of Row Box
    pub const ALIGNMENT_TOP_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(3);
}
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Bottom of Row Box
    pub const ALIGNMENT_BOTTOM_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(4);
}
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Center of Row Box
    pub const ALIGNMENT_CENTER_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(5);
}
#[repr(transparent)]
/** @brief Enumerates placeholder vertical alignment.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PlaceholderVerticalAlignment(pub ::core::ffi::c_uint);
/** @brief Defines the placeholder span.

@since 11
@version 1.0*/
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PlaceholderSpan {
    /// width of placeholder
    pub width: f64,
    /// height of placeholder
    pub height: f64,
    /// alignment of placeholder
    pub alignment: OH_Drawing_PlaceholderVerticalAlignment,
    /// baseline of placeholder
    pub baseline: OH_Drawing_TextBaseline,
    /// baselineoffset of placeholder
    pub baselineOffset: f64,
}
impl OH_Drawing_TextDecorationStyle {
    /// Solid style
    pub const TEXT_DECORATION_STYLE_SOLID: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(0);
}
impl OH_Drawing_TextDecorationStyle {
    /// Double style
    pub const TEXT_DECORATION_STYLE_DOUBLE: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(1);
}
impl OH_Drawing_TextDecorationStyle {
    /// Dotted style
    pub const TEXT_DECORATION_STYLE_DOTTED: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(2);
}
impl OH_Drawing_TextDecorationStyle {
    /// Dashed style
    pub const TEXT_DECORATION_STYLE_DASHED: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(3);
}
impl OH_Drawing_TextDecorationStyle {
    /// Wavy style
    pub const TEXT_DECORATION_STYLE_WAVY: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(4);
}
#[repr(transparent)]
/** @brief Enumerates text decoration style.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDecorationStyle(pub ::core::ffi::c_uint);
impl OH_Drawing_EllipsisModal {
    /// Head modal
    pub const ELLIPSIS_MODAL_HEAD: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(0);
}
impl OH_Drawing_EllipsisModal {
    /// Middle modal
    pub const ELLIPSIS_MODAL_MIDDLE: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(1);
}
impl OH_Drawing_EllipsisModal {
    /// Tail modal
    pub const ELLIPSIS_MODAL_TAIL: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(2);
}
#[repr(transparent)]
/** @brief Enumerates ellipsis modal.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_EllipsisModal(pub ::core::ffi::c_uint);
impl OH_Drawing_BreakStrategy {
    /// Greedy strategy
    pub const BREAK_STRATEGY_GREEDY: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(0);
}
impl OH_Drawing_BreakStrategy {
    /// Quality strategy
    pub const BREAK_STRATEGY_HIGH_QUALITY: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(1);
}
impl OH_Drawing_BreakStrategy {
    /// Balanced strategy
    pub const BREAK_STRATEGY_BALANCED: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(2);
}
#[repr(transparent)]
/** @brief Enumerates break strategy.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_BreakStrategy(pub ::core::ffi::c_uint);
impl OH_Drawing_WordBreakType {
    /// Normal type
    pub const WORD_BREAK_TYPE_NORMAL: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(0);
}
impl OH_Drawing_WordBreakType {
    /// Break All type
    pub const WORD_BREAK_TYPE_BREAK_ALL: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(1);
}
impl OH_Drawing_WordBreakType {
    /// Break Word type
    pub const WORD_BREAK_TYPE_BREAK_WORD: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(2);
}
#[repr(transparent)]
/** @brief Enumerates word break type.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_WordBreakType(pub ::core::ffi::c_uint);
impl OH_Drawing_RectHeightStyle {
    /// Tight style
    pub const RECT_HEIGHT_STYLE_TIGHT: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(0);
}
impl OH_Drawing_RectHeightStyle {
    /// Max style
    pub const RECT_HEIGHT_STYLE_MAX: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(1);
}
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacemiddle style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACEMIDDLE: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(2);
}
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacetop style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACETOP: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(3);
}
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacebottom style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACEBOTTOM: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(4);
}
impl OH_Drawing_RectHeightStyle {
    /// Struct style
    pub const RECT_HEIGHT_STYLE_STRUCT: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(5);
}
#[repr(transparent)]
/** @brief Enumerates rect height style.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_RectHeightStyle(pub ::core::ffi::c_uint);
impl OH_Drawing_RectWidthStyle {
    /// Tight style
    pub const RECT_WIDTH_STYLE_TIGHT: OH_Drawing_RectWidthStyle = OH_Drawing_RectWidthStyle(0);
}
impl OH_Drawing_RectWidthStyle {
    /// Max style
    pub const RECT_WIDTH_STYLE_MAX: OH_Drawing_RectWidthStyle = OH_Drawing_RectWidthStyle(1);
}
#[repr(transparent)]
/** @brief Enumerates rect Width style.

@since 11
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_RectWidthStyle(pub ::core::ffi::c_uint);
extern "C" {
    /** @brief Creates an <b>OH_Drawing_TypographyStyle</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @return Returns the pointer to the <b>OH_Drawing_TypographyStyle</b> object created.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_CreateTypographyStyle() -> *mut OH_Drawing_TypographyStyle;
    /** @brief Releases the memory occupied by an <b>OH_Drawing_TypographyStyle</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_DestroyTypographyStyle(arg1: *mut OH_Drawing_TypographyStyle);
    /** @brief Sets the text direction.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the text direction to set. For details, see the enum <b>OH_Drawing_TextDirection</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the text alignment mode.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the text alignment mode to set. For details, see the enum <b>OH_Drawing_TextAlign</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the maximum number of lines in a text file.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the maximum number of lines to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextMaxLines(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Creates an <b>OH_Drawing_TextStyle</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @return Returns the pointer to the <b>OH_Drawing_TextStyle</b> object created.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_CreateTextStyle() -> *mut OH_Drawing_TextStyle;
    /** @brief Releases the memory occupied by an <b>OH_Drawing_TextStyle</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_DestroyTextStyle(arg1: *mut OH_Drawing_TextStyle);
    /** @brief Sets the text color.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param uint32_t Indicates the color to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
    /** @brief Sets the font size.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param double Indicates the font size to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleFontSize(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /** @brief Sets the font weight.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the font weight to set. For details, see the enum <b>OH_Drawing_FontWeight</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the text baseline.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the text baseline to set. For details, see the enum <b>OH_Drawing_TextBaseline</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleBaseLine(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the text decoration.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the text decoration to set. For details, see the enum <b>OH_Drawing_TextDecoration</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleDecoration(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the color for the text decoration.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param uint32_t Indicates the color to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleDecorationColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
    /** @brief Sets the font height.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param double Indicates the font height to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleFontHeight(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /** @brief Sets the font families.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the number of font families to set.
    @param char Indicates the pointer to the font families to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
        fontFamilies: *mut *const ::core::ffi::c_char,
    );
    /** @brief Sets the font style.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the font style to set. For details, see the enum <b>OH_Drawing_FontStyle</b>.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the locale.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param char Indicates the pointer to the locale to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleLocale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /** @brief Creates a pointer to an <b>OH_Drawing_TypographyCreate</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param OH_Drawing_FontCollection Indicates the pointer to an <b>OH_Drawing_FontCollection</b> object.
    @return Returns the pointer to the <b>OH_Drawing_TypographyCreate</b> object created.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_CreateTypographyHandler(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_FontCollection,
    ) -> *mut OH_Drawing_TypographyCreate;
    /** @brief Releases the memory occupied by an <b>OH_Drawing_TypographyCreate</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_DestroyTypographyHandler(arg1: *mut OH_Drawing_TypographyCreate);
    /** @brief Sets the text style.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_TypographyHandlerPushTextStyle(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_TextStyle,
    );
    /** @brief Sets the text content.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @param char Indicates the pointer to the text content to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_TypographyHandlerAddText(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *const ::core::ffi::c_char,
    );
    /** @brief Removes the topmost style in the stack, leaving the remaining styles in effect.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_TypographyHandlerPopTextStyle(arg1: *mut OH_Drawing_TypographyCreate);
    /** @brief Creates an <b>OH_Drawing_Typography</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @return Returns the pointer to the <b>OH_Drawing_Typography</b> object created.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_CreateTypography(
        arg1: *mut OH_Drawing_TypographyCreate,
    ) -> *mut OH_Drawing_Typography;
    /** @brief Releases the memory occupied by an <b>OH_Drawing_Typography</b> object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_DestroyTypography(arg1: *mut OH_Drawing_Typography);
    /** @brief Lays out the typography.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param double Indicates the maximum text width to set.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_TypographyLayout(arg1: *mut OH_Drawing_Typography, arg2: f64);
    /** @brief Paints text on the canvas.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param OH_Drawing_Canvas Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    @param double Indicates the x coordinate.
    @param double Indicates the y coordinate.
    @since 8
    @version 1.0*/
    pub fn OH_Drawing_TypographyPaint(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: f64,
        arg4: f64,
    );
    /** @brief Gets the max width.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the max width.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetMaxWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Gets the height.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the height.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetHeight(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Obtains the width of the longest line. You are advised to round up the return value in actual use.
    When the text content is empty, the minimum float value,
    that is, -340282346638528859811704183484516925440.000000, is returned.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Pointer to an <b>OH_Drawing_Typography</b> object, which is obtained by
    {@link OH_Drawing_CreateTypography}.
    @return Returns the width of the longest line.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetLongestLine(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Gets the min intrinsic width.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the min intrinsic width.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetMinIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Gets the max intrinsic width.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the max intrinsic width.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetMaxIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Gets the alphabetic baseline.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the alphabetic baseline.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetAlphabeticBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Gets the ideographic baseline.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the ideographic baseline.
    @since 9
    @version 1.1*/
    pub fn OH_Drawing_TypographyGetIdeographicBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
    /** @brief Sets the placeholder.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyCreate Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    @param OH_Drawing_PlaceholderSpan Indicates the pointer to an <b>OH_Drawing_PlaceholderSpan</b> object.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyHandlerAddPlaceholder(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_PlaceholderSpan,
    );
    /** @brief Gets the exceed maxLines.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the exceed maxLines.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyDidExceedMaxLines(arg1: *mut OH_Drawing_Typography) -> bool;
    /** @brief Gets the rects for range.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param size_t Indicates the start of range to set.
    @param size_t Indicates the end of range to set.
    @param OH_Drawing_RectHeightStyle Indicates the height style to set.
    For details, see the enum <b>OH_Drawing_RectHeightStyle</b>.
    @param OH_Drawing_RectWidthStyle Indicates the width style to set.
    For details, see the enum <b>OH_Drawing_RectWidthStyle</b>.
    @return Returns the rects for range.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetRectsForRange(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
        arg3: usize,
        arg4: OH_Drawing_RectHeightStyle,
        arg5: OH_Drawing_RectWidthStyle,
    ) -> *mut OH_Drawing_TextBox;
    /** @brief Gets the rects for placeholders.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the rects for placeholders.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetRectsForPlaceholders(
        arg1: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_TextBox;
    /** @brief Gets left from textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @param int Indicates the index of textbox.
    @return Returns left from textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetLeftFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /** @brief Gets right from textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @param int Indicates the index of textbox.
    @return Returns right from textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetRightFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /** @brief Gets top from textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @param int Indicates the index of textbox.
    @return Returns top from textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetTopFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /** @brief Gets bottom from textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @param int Indicates the index of textbox.
    @return Returns bottom from textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetBottomFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /** @brief Gets direction from textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @param int Indicates the index of textbox.
    @return Returns direction from textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetTextDirectionFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    /** @brief Gets size of textbox.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextBox Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    @return Returns size of textbox.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetSizeOfTextBox(arg1: *mut OH_Drawing_TextBox) -> usize;
    /** @brief Gets the glyphposition at coordinate.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param double Indicates the positionX of typography to set.
    @param double Indicates the positionY of typography to set.
    @return Returns the glyphposition at coordinate.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinate(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
    /** @brief Gets the glyphposition at coordinate with cluster.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param double Indicates the positionX of typography to set.
    @param double Indicates the positionY of typography to set.
    @return Returns the glyphposition at coordinate with cluster.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinateWithCluster(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
    /** @brief Gets position from position and affinity.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_PositionAndAffinity Indicates the pointer to an <b>OH_Drawing_PositionAndAffinity</b> object.
    @return Returns position from position and affinity.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetPositionFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> usize;
    /** @brief Gets affinity from position and affinity.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_PositionAndAffinity Indicates the pointer to an <b>OH_Drawing_PositionAndAffinity</b> object.
    @return Returns affinity from position and affinity.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetAffinityFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> ::core::ffi::c_int;
    /** @brief Gets the word boundary.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param size_t Indicates the size of text to set.
    @return Returns the word boundary.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetWordBoundary(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
    ) -> *mut OH_Drawing_Range;
    /** @brief Gets start from range.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Range Indicates the pointer to an <b>OH_Drawing_Range</b> object.
    @return Returns start from range.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetStartFromRange(arg1: *mut OH_Drawing_Range) -> usize;
    /** @brief Gets end from range.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Range Indicates the pointer to an <b>OH_Drawing_Range</b> object.
    @return Returns end from range.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_GetEndFromRange(arg1: *mut OH_Drawing_Range) -> usize;
    /** @brief Gets the line count.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @return Returns the line count.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetLineCount(arg1: *mut OH_Drawing_Typography) -> usize;
    /** @brief Sets the decoration style.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the text decoration style to set.
    For details, see the enum <b>OH_Drawing_TextDecorationStyle</b>.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleDecorationStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the decoration thickness scale.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param double Indicates the thickness scale of text decoration to set.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleDecorationThicknessScale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: f64,
    );
    /** @brief Sets the letter spacing.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param double Indicates the letter space to set.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleLetterSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /** @brief Sets the word spacing.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param double Indicates the word space to set.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleWordSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /** @brief Sets the half leading.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param bool Indicates the half leading to set.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleHalfLeading(arg1: *mut OH_Drawing_TextStyle, arg2: bool);
    /** @brief Sets the ellipsis.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param char* Indicates the pointer to ellipsis style.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleEllipsis(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /** @brief Sets the ellipsis modal.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TextStyle Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    @param int Indicates the ellipsis model to set. For details, see the enum <b>OH_Drawing_EllipsisModal</b>.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTextStyleEllipsisModal(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the break strategy.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the break strategy to set. For details, see the enum <b>OH_Drawing_BreakStrategy</b>.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextBreakStrategy(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the word break type.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the word break type to set. For details, see the enum <b>OH_Drawing_WordBreakType</b>.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextWordBreakType(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief Sets the ellipsis modal.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_TypographyStyle Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    @param int Indicates the ellipsis modal to set. For details, see the enum <b>OH_Drawing_EllipsisModal</b>.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_SetTypographyTextEllipsisModal(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /** @brief get line height.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param int Indicates the line number.
    @return Returns line height.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetLineHeight(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
    ) -> f64;
    /** @brief get line width.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Typography Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    @param int Indicates the line number.
    @return Returns line width.
    @since 11
    @version 1.0*/
    pub fn OH_Drawing_TypographyGetLineWidth(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
    ) -> f64;
}
