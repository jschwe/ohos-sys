/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[repr(C)]
pub struct OH_Drawing_Canvas {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OH_Drawing_Pen {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OH_Drawing_Brush {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OH_Drawing_Path {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OH_Drawing_Bitmap {
    _unused: [u8; 0],
}
impl OH_Drawing_ColorFormat {
    /// Unknown format.
    pub const COLOR_FORMAT_UNKNOWN: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(0);
}
impl OH_Drawing_ColorFormat {
    /// Each pixel is represented by 8 bits, which together indicate alpha.
    pub const COLOR_FORMAT_ALPHA_8: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(1);
}
impl OH_Drawing_ColorFormat {
    /** Each pixel is represented by 16 bits. From the most significant bit to the least significant bit,
    the first 5 bits indicate red, the subsequent 6 bits indicate green, and the last 5 bits indicate blue.*/
    pub const COLOR_FORMAT_RGB_565: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(2);
}
impl OH_Drawing_ColorFormat {
    /** Each pixel is represented by 16 bits. From the most significant bit to the least significant bit,
    every 4 bits indicate alpha, red, green, and blue, respectively.*/
    pub const COLOR_FORMAT_ARGB_4444: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(3);
}
impl OH_Drawing_ColorFormat {
    /** Each pixel is represented by 32 bits. From the most significant bit to the least significant bit,
    every 8 bits indicate alpha, red, green, and blue, respectively.*/
    pub const COLOR_FORMAT_RGBA_8888: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(4);
}
impl OH_Drawing_ColorFormat {
    /** Each pixel is represented by 32 bits. From the most significant bit to the least significant bit,
    every 8 bits indicate blue, green, red, and alpha, respectively.*/
    pub const COLOR_FORMAT_BGRA_8888: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(5);
}
#[repr(transparent)]
/** @brief Enumerates storage formats of bitmap pixels.

@since 8
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_ColorFormat(pub ::core::ffi::c_uint);
impl OH_Drawing_AlphaFormat {
    /// Unknown format.
    pub const ALPHA_FORMAT_UNKNOWN: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(0);
}
impl OH_Drawing_AlphaFormat {
    /// The bitmap does not have the alpha component.
    pub const ALPHA_FORMAT_OPAQUE: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(1);
}
impl OH_Drawing_AlphaFormat {
    /// The color component of each pixel is premultiplied by the alpha component.
    pub const ALPHA_FORMAT_PREMUL: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(2);
}
impl OH_Drawing_AlphaFormat {
    /// The color component of each pixel is not premultiplied by the alpha component.
    pub const ALPHA_FORMAT_UNPREMUL: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(3);
}
#[repr(transparent)]
/** @brief Enumerates alpha formats of bitmap pixels.

@since 8
@version 1.0*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_AlphaFormat(pub ::core::ffi::c_uint);
