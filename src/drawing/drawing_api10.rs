/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Canvas {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Pen {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Brush {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Path {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Bitmap {
    _unused: [u8; 0],
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_UNKNOWN: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(0);
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_ALPHA_8: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(1);
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_RGB_565: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(2);
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_ARGB_4444: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(3);
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_RGBA_8888: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(4);
}
impl OH_Drawing_ColorFormat {
    pub const COLOR_FORMAT_BGRA_8888: OH_Drawing_ColorFormat = OH_Drawing_ColorFormat(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_ColorFormat(pub ::core::ffi::c_uint);
impl OH_Drawing_AlphaFormat {
    pub const ALPHA_FORMAT_UNKNOWN: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(0);
}
impl OH_Drawing_AlphaFormat {
    pub const ALPHA_FORMAT_OPAQUE: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(1);
}
impl OH_Drawing_AlphaFormat {
    pub const ALPHA_FORMAT_PREMUL: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(2);
}
impl OH_Drawing_AlphaFormat {
    pub const ALPHA_FORMAT_UNPREMUL: OH_Drawing_AlphaFormat = OH_Drawing_AlphaFormat(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_AlphaFormat(pub ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_BitmapFormat {
    pub colorFormat: OH_Drawing_ColorFormat,
    pub alphaFormat: OH_Drawing_AlphaFormat,
}
extern "C" {
    pub fn OH_Drawing_BitmapCreate() -> *mut OH_Drawing_Bitmap;
}
extern "C" {
    pub fn OH_Drawing_BitmapDestroy(arg1: *mut OH_Drawing_Bitmap);
}
extern "C" {
    pub fn OH_Drawing_BitmapBuild(
        arg1: *mut OH_Drawing_Bitmap,
        width: u32,
        height: u32,
        arg2: *const OH_Drawing_BitmapFormat,
    );
}
extern "C" {
    pub fn OH_Drawing_BitmapGetWidth(arg1: *mut OH_Drawing_Bitmap) -> u32;
}
extern "C" {
    pub fn OH_Drawing_BitmapGetHeight(arg1: *mut OH_Drawing_Bitmap) -> u32;
}
extern "C" {
    pub fn OH_Drawing_BitmapGetPixels(arg1: *mut OH_Drawing_Bitmap) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn OH_Drawing_BrushCreate() -> *mut OH_Drawing_Brush;
}
extern "C" {
    pub fn OH_Drawing_BrushDestroy(arg1: *mut OH_Drawing_Brush);
}
extern "C" {
    pub fn OH_Drawing_BrushIsAntiAlias(arg1: *const OH_Drawing_Brush) -> bool;
}
extern "C" {
    pub fn OH_Drawing_BrushSetAntiAlias(arg1: *mut OH_Drawing_Brush, arg2: bool);
}
extern "C" {
    pub fn OH_Drawing_BrushGetColor(arg1: *const OH_Drawing_Brush) -> u32;
}
extern "C" {
    pub fn OH_Drawing_BrushSetColor(arg1: *mut OH_Drawing_Brush, color: u32);
}
extern "C" {
    pub fn OH_Drawing_CanvasCreate() -> *mut OH_Drawing_Canvas;
}
extern "C" {
    pub fn OH_Drawing_CanvasDestroy(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasBind(arg1: *mut OH_Drawing_Canvas, arg2: *mut OH_Drawing_Bitmap);
}
extern "C" {
    pub fn OH_Drawing_CanvasAttachPen(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Pen);
}
extern "C" {
    pub fn OH_Drawing_CanvasDetachPen(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasAttachBrush(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDetachBrush(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasSave(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasRestore(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawLine(
        arg1: *mut OH_Drawing_Canvas,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawPath(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Path);
}
extern "C" {
    pub fn OH_Drawing_CanvasClear(arg1: *mut OH_Drawing_Canvas, color: u32);
}
extern "C" {
    pub fn OH_Drawing_ColorSetArgb(alpha: u32, red: u32, green: u32, blue: u32) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontCollection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Typography {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextStyle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TypographyStyle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TypographyCreate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_Drawing_CreateFontCollection() -> *mut OH_Drawing_FontCollection;
}
extern "C" {
    pub fn OH_Drawing_DestroyFontCollection(arg1: *mut OH_Drawing_FontCollection);
}
extern "C" {
    pub fn OH_Drawing_PathCreate() -> *mut OH_Drawing_Path;
}
extern "C" {
    pub fn OH_Drawing_PathDestroy(arg1: *mut OH_Drawing_Path);
}
extern "C" {
    pub fn OH_Drawing_PathMoveTo(arg1: *mut OH_Drawing_Path, x: f32, y: f32);
}
extern "C" {
    pub fn OH_Drawing_PathLineTo(arg1: *mut OH_Drawing_Path, x: f32, y: f32);
}
extern "C" {
    pub fn OH_Drawing_PathArcTo(
        arg1: *mut OH_Drawing_Path,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
        startDeg: f32,
        sweepDeg: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_PathQuadTo(
        arg1: *mut OH_Drawing_Path,
        ctrlX: f32,
        ctrlY: f32,
        endX: f32,
        endY: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_PathCubicTo(
        arg1: *mut OH_Drawing_Path,
        ctrlX1: f32,
        ctrlY1: f32,
        ctrlX2: f32,
        ctrlY2: f32,
        endX: f32,
        endY: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_PathClose(arg1: *mut OH_Drawing_Path);
}
extern "C" {
    pub fn OH_Drawing_PathReset(arg1: *mut OH_Drawing_Path);
}
extern "C" {
    pub fn OH_Drawing_PenCreate() -> *mut OH_Drawing_Pen;
}
extern "C" {
    pub fn OH_Drawing_PenDestroy(arg1: *mut OH_Drawing_Pen);
}
extern "C" {
    pub fn OH_Drawing_PenIsAntiAlias(arg1: *const OH_Drawing_Pen) -> bool;
}
extern "C" {
    pub fn OH_Drawing_PenSetAntiAlias(arg1: *mut OH_Drawing_Pen, arg2: bool);
}
extern "C" {
    pub fn OH_Drawing_PenGetColor(arg1: *const OH_Drawing_Pen) -> u32;
}
extern "C" {
    pub fn OH_Drawing_PenSetColor(arg1: *mut OH_Drawing_Pen, color: u32);
}
extern "C" {
    pub fn OH_Drawing_PenGetWidth(arg1: *const OH_Drawing_Pen) -> f32;
}
extern "C" {
    pub fn OH_Drawing_PenSetWidth(arg1: *mut OH_Drawing_Pen, width: f32);
}
extern "C" {
    pub fn OH_Drawing_PenGetMiterLimit(arg1: *const OH_Drawing_Pen) -> f32;
}
extern "C" {
    pub fn OH_Drawing_PenSetMiterLimit(arg1: *mut OH_Drawing_Pen, miter: f32);
}
impl OH_Drawing_PenLineCapStyle {
    pub const LINE_FLAT_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(0);
}
impl OH_Drawing_PenLineCapStyle {
    pub const LINE_SQUARE_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(1);
}
impl OH_Drawing_PenLineCapStyle {
    pub const LINE_ROUND_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PenLineCapStyle(pub ::core::ffi::c_uint);
extern "C" {
    pub fn OH_Drawing_PenGetCap(arg1: *const OH_Drawing_Pen) -> OH_Drawing_PenLineCapStyle;
}
extern "C" {
    pub fn OH_Drawing_PenSetCap(arg1: *mut OH_Drawing_Pen, arg2: OH_Drawing_PenLineCapStyle);
}
impl OH_Drawing_PenLineJoinStyle {
    pub const LINE_MITER_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(0);
}
impl OH_Drawing_PenLineJoinStyle {
    pub const LINE_ROUND_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(1);
}
impl OH_Drawing_PenLineJoinStyle {
    pub const LINE_BEVEL_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PenLineJoinStyle(pub ::core::ffi::c_uint);
extern "C" {
    pub fn OH_Drawing_PenGetJoin(arg1: *const OH_Drawing_Pen) -> OH_Drawing_PenLineJoinStyle;
}
extern "C" {
    pub fn OH_Drawing_PenSetJoin(arg1: *mut OH_Drawing_Pen, arg2: OH_Drawing_PenLineJoinStyle);
}
impl OH_Drawing_TextDirection {
    pub const TEXT_DIRECTION_RTL: OH_Drawing_TextDirection = OH_Drawing_TextDirection(0);
}
impl OH_Drawing_TextDirection {
    pub const TEXT_DIRECTION_LTR: OH_Drawing_TextDirection = OH_Drawing_TextDirection(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDirection(pub ::core::ffi::c_uint);
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_LEFT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(0);
}
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_RIGHT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(1);
}
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_CENTER: OH_Drawing_TextAlign = OH_Drawing_TextAlign(2);
}
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_JUSTIFY: OH_Drawing_TextAlign = OH_Drawing_TextAlign(3);
}
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_START: OH_Drawing_TextAlign = OH_Drawing_TextAlign(4);
}
impl OH_Drawing_TextAlign {
    pub const TEXT_ALIGN_END: OH_Drawing_TextAlign = OH_Drawing_TextAlign(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextAlign(pub ::core::ffi::c_uint);
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_100: OH_Drawing_FontWeight = OH_Drawing_FontWeight(0);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_200: OH_Drawing_FontWeight = OH_Drawing_FontWeight(1);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_300: OH_Drawing_FontWeight = OH_Drawing_FontWeight(2);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_400: OH_Drawing_FontWeight = OH_Drawing_FontWeight(3);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_500: OH_Drawing_FontWeight = OH_Drawing_FontWeight(4);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_600: OH_Drawing_FontWeight = OH_Drawing_FontWeight(5);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_700: OH_Drawing_FontWeight = OH_Drawing_FontWeight(6);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_800: OH_Drawing_FontWeight = OH_Drawing_FontWeight(7);
}
impl OH_Drawing_FontWeight {
    pub const FONT_WEIGHT_900: OH_Drawing_FontWeight = OH_Drawing_FontWeight(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontWeight(pub ::core::ffi::c_uint);
impl OH_Drawing_TextBaseline {
    pub const TEXT_BASELINE_ALPHABETIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(0);
}
impl OH_Drawing_TextBaseline {
    pub const TEXT_BASELINE_IDEOGRAPHIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextBaseline(pub ::core::ffi::c_uint);
impl OH_Drawing_TextDecoration {
    pub const TEXT_DECORATION_NONE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(0);
}
impl OH_Drawing_TextDecoration {
    pub const TEXT_DECORATION_UNDERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(1);
}
impl OH_Drawing_TextDecoration {
    pub const TEXT_DECORATION_OVERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(2);
}
impl OH_Drawing_TextDecoration {
    pub const TEXT_DECORATION_LINE_THROUGH: OH_Drawing_TextDecoration =
        OH_Drawing_TextDecoration(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDecoration(pub ::core::ffi::c_uint);
impl OH_Drawing_FontStyle {
    pub const FONT_STYLE_NORMAL: OH_Drawing_FontStyle = OH_Drawing_FontStyle(0);
}
impl OH_Drawing_FontStyle {
    pub const FONT_STYLE_ITALIC: OH_Drawing_FontStyle = OH_Drawing_FontStyle(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontStyle(pub ::core::ffi::c_uint);
extern "C" {
    pub fn OH_Drawing_CreateTypographyStyle() -> *mut OH_Drawing_TypographyStyle;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypographyStyle(arg1: *mut OH_Drawing_TypographyStyle);
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextMaxLines(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_CreateTextStyle() -> *mut OH_Drawing_TextStyle;
}
extern "C" {
    pub fn OH_Drawing_DestroyTextStyle(arg1: *mut OH_Drawing_TextStyle);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontSize(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleBaseLine(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecoration(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecorationColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontHeight(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
        fontFamilies: *mut *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleLocale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_CreateTypographyHandler(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_FontCollection,
    ) -> *mut OH_Drawing_TypographyCreate;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypographyHandler(arg1: *mut OH_Drawing_TypographyCreate);
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerPushTextStyle(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_TextStyle,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerAddText(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerPopTextStyle(arg1: *mut OH_Drawing_TypographyCreate);
}
extern "C" {
    pub fn OH_Drawing_CreateTypography(
        arg1: *mut OH_Drawing_TypographyCreate,
    ) -> *mut OH_Drawing_Typography;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypography(arg1: *mut OH_Drawing_Typography);
}
extern "C" {
    pub fn OH_Drawing_TypographyLayout(arg1: *mut OH_Drawing_Typography, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_TypographyPaint(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMaxWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetHeight(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLongestLine(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMinIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMaxIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetAlphabeticBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetIdeographicBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
}
